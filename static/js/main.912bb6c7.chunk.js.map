{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","onSearchFieldChange","onChange","type","placeholder","Scroll","children","height","style","overflow","borderBottom","background","App","e","setState","searchfield","target","value","fetch","responce","json","users","this","filteredRobots","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.912bb6c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({name, email, id}) =>\r\n{\r\n\treturn(\r\n\t\t<div className=\"tc card dib pa3 ma2 br3 shadow-5 grow\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"my friend\"/>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>\r\n{\r\n\treturn(\r\n\t\t<div className=\"pv3\">\r\n\t\t\t{\r\n\t\t\t\trobots.map((robot, i) => \r\n\t\t\t\t{\r\n\t\t\t\t\treturn <Card \r\n\t\t\t\t\tname={robot.name} \r\n\t\t\t\t\temail={robot.email} \r\n\t\t\t\t\tid={robot.id} \r\n\t\t\t\t\tkey={robot.id} />\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({onSearchFieldChange}) =>\r\n{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\tonChange={onSearchFieldChange} \r\n\t\t\tclassName=\"mb2 pa3 searchBox ba b--green\" \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"search for friends\"/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = ({children, height}) =>\r\n{\r\n\treturn(\r\n\t\t<div style={{overflow: 'auto', height: '750px', borderBottom: '3px solid rgb(0, 60, 60)', background: 'linear-gradient(to left, rgb(0, 94, 94), rgb(0, 128, 128))',}}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends React.Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state = \r\n\t\t{\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tonSearchFieldChange = (e) =>\r\n\t{\r\n\t\tthis.setState({searchfield: e.target.value});\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(responce => responce.json())\r\n\t\t.then(users => this.setState({robots: users}));\r\n\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => \r\n\t\t{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<div className=\"header pb3 pt4\">\r\n\t\t\t\t\t<h1 className=\"f1 mb2 mt0\">robofriends</h1>\r\n\t\t\t\t\t<SearchBox onSearchFieldChange={this.onSearchFieldChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}